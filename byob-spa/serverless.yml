service: byob-spa

frameworkVersion: ">=1.2.0 <2.0.0"

plugins:
  - serverless-certificate-creator
  - serverless-single-page-app-plugin

custom:
  company: <CNAME>
  domain: <Route 53 Domain Suffix>
  hostZoneId: <Route 53 Zone ID>
  domainName: ${self:custom.company}.${self:custom.domain}
  s3Bucket: byob-spa-${self:custom.company}.${self:custom.domain}
  distFolder: dist

  customCertificate:
    certificateName: ${self:custom.domainName}
    region: "us-east-1" # required for using CloudFront with AWS Certificate Manager
    # hostedZoneName: idp.rocks
    hostedZoneId: ${self:custom.hostZoneId}

provider:
  name: aws
  profile: serverless-okta
  region: us-east-1
  runtime: nodejs8.10

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: S3-${self:custom.s3Bucket}
              # CustomOriginConfig:
              #   #  HTTPPort: 80
              #   HTTPSPort: 443
              #   OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: CloudFrontOriginAccessIdentity
              #  OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: true
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          #   - ${self:custom.domainName}
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            ## The origin id defined above
            TargetOriginId: S3-${self:custom.s3Bucket}
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn: ${certificate:${self:custom.customCertificate.certificateName}:CertificateArn}
            SslSupportMethod: sni-only
            # CloudFrontDefaultCertificate: true
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "S3Origin"
    # WebsiteDNSName:
    #   Type: AWS::Route53::RecordSetGroup
    #   Properties:
    #     HostedZoneId: ${self:custom.hostZoneId}
    #     RecordSets:
    #       - Name: ${self:custom.domainName}
    #         Type: A
    #         AliasTarget:
    #           HostedZoneId: Z2FDTNDATAQYW2
    #           DNSName:
    #             "Fn::GetAtt": [WebAppCloudFrontDistribution, DomainName]
    #           EvaluateTargetHealth: false

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        "Fn::GetAtt": [WebAppCloudFrontDistribution, DomainName]
